<?php
namespace app\index\controller;
use alisms\Alisms;
use app\facade\Banner;
use app\index\model\Member as meb;
use app\index\model\Collect;
use app\index\model\Study;
use think\facade\Cache;
use think\facade\Env;

class Member extends Base
{
    protected $meb;
    protected $sms;
    protected $collect;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->meb = new meb();
        $this->sms = new Alisms();   //实例化阿里云短信类
        $this->collect = new Collect();   //实例化阿里云短信类
    }

    public function index(){
        //获取banner
        if(isMobile()){
            //手机端
            $topBanner = Banner::getBanner(3);
        }else{
            $topBanner = Banner::getBanner(1);
        }
        $footBanner = Banner::getBanner(0);
        $member = session('member');
        $memberInfo = $this->meb->getMember($member['id']); //会员额外信息
        $members = $this->meb->getMember($member['id'],2); //会员额外信息
        $exam = $this->meb->getExam($member['id']);
        $dataBase = [
            'title'=> '个人中心',
            'topBanner'=> $topBanner,
            'footBanner'=> $footBanner,
            'memberInfo'=>$memberInfo,
            'exam'=>$exam,
            'member'=>$members,
            'footActive'=> 'my'
        ];
        return $this->fetch('',$dataBase);
    }

    //用户信息
    public function info(){
        $member = session('member');
        $members = $this->meb->getMember($member['id'],2); //会员额外信息
        $dataBase = [
            'member'=>$members,
            'footActive'=> 'my'
        ];
        return $this->fetch('',$dataBase);
    }

    //学习数据
    public function errorTotal(){
        $id = session('member')['id'];
        $study = new Study();
        $today = $study->getToday($id);
        $week= $study->getWeek($id);
        $month = $study->getMonth($id);
        $term = $study->getTerm($id);
        $term2 = $study->getTerm($id,2);
        $dataBase = [
            'today'=> $today,
            'week'=> $week,
            'month'=> $month,
            'term'=> $term,
            'date'=> $term2['date_list'],
            'count'=> $term2['count'],
            'error'=> $term2['error'],
            'rate'=> $term2['rate'],
            'footActive'=> 'my'
        ];
        return $this->fetch('',$dataBase);
    }

    //我的收藏
    public function collect(){
        $member = session('member');
        $mid = $member['id'];
        $colloct = $this->collect->getCollect($mid);
        $id='';
        foreach ($colloct as $k=>$c){
            $count = $this->collect->getCount($c['id']);
            $colloct[$k]['count'] = $count;
            if($c['pid']==0){
                $id = $c['id'];
            }
        }
        $dataBase = [
            'colloct'=>$colloct,
            'id'=>$id,
            'footActive'=> 'my'
        ];
        return $this->fetch('',$dataBase);
    }

    //我的课程
    public function course(){
        $member = session('member');
        $meb = new meb();
        $data = $meb->getCourse($member['id']);
//        dump($data);
        $dataBase = [
            'book'=> $data,
            'footActive'=> 'my'
        ];
        return $this->fetch('',$dataBase);
    }

    //意见反馈
    public function feedback(){
        $member = session('member');
        $meb = new meb();
        $data = $meb->getFeedback($member['id']);
//        dump($data);
        $dataBase = [
            'feedback'=> $data['info'],
            'count'=> $data['count'],
            'footActive'=> 'my'
        ];
        return $this->fetch('',$dataBase);
    }


    //上传头像
    public function uploadImg(){
        $ROOT_PATH = str_replace('\\',"/",Env::get('root_path'));
        $file = request()->file('image');
        $id = session('member')['id'];
        if(empty($file)){
            $result["code"] = "1";
            $result["msg"] = "请选择图片";
        }else{
            // 移动到框架应用根目录/public/uploads/ 目录下
            $info = $file->validate(['ext'=>'jpg,png,gif'])->move($ROOT_PATH . 'public/static' . DIRECTORY_SEPARATOR . 'upload' );
            if($info){
                $name_path =str_replace('\\',"/",$info->getSaveName());
                //成功上传后 获取上传信息
                $src = "/static/upload/".$name_path;
                $flag = $this->meb->updateImg($id,$src);
                $m = session('member');
                $m['head_img'] = $src;
                session('member',$m);

                if($flag){
                    $result["code"] = '0';
                    $result["msg"] = "上传成功";
                }else{
                    $result["code"] = '3';
                    $result["msg"] = "更新头像失败";
                }

            }else{
                // 上传失败获取错误信息
                $result["code"] = "2";
                $result["msg"] = $file->getError();
            }
        }
        return json($result);
    }

    //修改用户信息
    public function update(){
        $post = request()->post();
        $result = $this->meb->updateInfo($post);
        if($result){
            return json(['code'=> 200, 'msg'=>'更新成功']);
        }else{
            return json(['code'=> 400, 'msg'=>'更新失败']);
        }
    }

    //发送验证码
    public function getCode(){
        $signName = '勤藤教育';
        //获取阿里云短信配置信息
        $config = getSmsConfig(1,$signName,4);	//$id,$sign,$tpl
        //销毁无用变量
        unset($config['id']);
        unset($config['status']);
        unset($config['type']);
        //点击发送验证码
        if(request()->isGet()) {
            $phone = input('phone');
            $smscode = getCode(); //生成验证码
            $config['phone'] = $phone;
            $templateCode = "{'code':'".$smscode."'}";
//             dump($templateCode);die;
            $result = $this->sms->sendSms($config, $templateCode);
            if ($result['Code'] == 'OK') {
                Cache::store('redis')->set($phone, $smscode, 300);
            }
            $flag = $result['Code'];
            $msg = $result['Message'];
            return json(['code'=>$flag,'msg'=>$msg]);
        }

        //验证码校验
        if(request()->isPost()){
            $phone = input('phone');
            $inputCode = input('code');
            $senCode = Cache::store('redis')->get($phone);
            if(isset($senCode)){
                if($senCode == $inputCode){
                    return json(['code'=>200,'msg'=>'验证码正确！']);
                }else{
                    return json(['code'=>400,'msg'=>'验证码错误！']);
                }
            }else{
                return json(['code'=>404,'msg'=>'验证码过期']);
            }
        }
    }

    //验证手机号码
    public function checkPhone(){
        $id = input('id');
        $phone = input('phone');
        $result = $this->meb->checkPhone($id,$phone);
        if ($result == 1){
            return json(['code'=>200, 'msg'=>'手机号码验证通过！']);
        }else{
            return json(['code'=>400, 'msg'=>'手机号码验证失败，请跟换手机号！']);
        }
    }

    //修改密码
    public function updatePwd(){
        $id = input('id');
        $pwd = md5(input('pwd1'));
        $result = $this->meb->updatePwd($id,$pwd);
        if ($result){
            return json(['code'=>200,'msg'=>'修改成功！']);
        }else{
            return json(['code'=>400,'msg'=>'修改失败！']);
        }
    }

    //添加收藏夹
    public function addCollect(){
        $post = request()->post();
        $data = [
            'mid'=>session('member')['id'],
            'name'=>$post['name'],
            'pid'=>$post['id'],
            'sort'=>0
        ];
        $result = $this->collect->addCollect($data);
        if ($result == 1){
            return json(['code'=>200, 'msg'=>'创建成功']);
        }else{
            return json(['code'=>400, 'msg'=>'创建失败']);
        }
    }

    //获取收藏夹内容
    public function getCollectList(){
        $id = input('id');
        $data = $this->collect->getCollectList($id);
        if (!empty($data)){
            return json(['code'=>200, 'msg'=>'查询成功！', 'data'=>$data]);
        }else{
            return json(['code'=>400, 'msg'=>'未获取到相关数据', 'data'=>'']);
        }
    }

    public function home(){
        return $this->fetch();
    }
}